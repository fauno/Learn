<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://fauno.github.io/Learn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fauno.github.io/Learn/" rel="alternate" type="text/html" /><updated>2021-06-25T19:58:34-03:00</updated><id>https://fauno.github.io/Learn/feed.xml</id><title type="html">Lovelace Academy</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Transactions: UTxO and Metadata</title><link href="https://fauno.github.io/Learn/transactions-utxo-and-metadata/" rel="alternate" type="text/html" title="Transactions: UTxO and Metadata" /><published>2021-06-10T00:00:00-03:00</published><updated>2021-06-10T00:00:00-03:00</updated><id>https://fauno.github.io/Learn/transactions-utxo-and-metadata</id><content type="html" xml:base="https://fauno.github.io/Learn/transactions-utxo-and-metadata/">&lt;p&gt;Transactions are basic units representing the creation or transfer of
values in a blockchain and make up a significant payload of every block
appended to it. Transactions and their metadata last the entire lifetime
of the blockchain, so once appended and accepted by the majority of the
network, cannot be altered or deleted without a major coordinated event
like a hard fork.&lt;/p&gt;

&lt;h2 id=&quot;the-utxo-accounting-model&quot;&gt;The UTxO Accounting Model&lt;/h2&gt;

&lt;p&gt;Cardano, like Bitcoin, uses the UTxO accounting model to signify the
flow of values from transactions. UTxO stands for &lt;strong&gt;U&lt;/strong&gt; nspent &lt;strong&gt;T&lt;/strong&gt;
ransaction &lt;strong&gt;O&lt;/strong&gt; utput.&lt;/p&gt;

&lt;p&gt;As opposed to an accounts-based blockchain (e.g. Ethereum) which holds
one single value representing the active balance of an address,
addresses in Cardano can hold multiple transaction outputs and it is up
to the wallet software to calculate the active balance from the current
set of UTxOs. Although it may seem like unnecessary complexity, this
model provides a more elegant, performant and deterministic model to
reason with the current state of the blockchain. We will focus on the
simpler Shelley UTxO model and expand on EUTxO (Extended UTxO) and its
main benefits in another article.&lt;/p&gt;

&lt;p&gt;The UTxO model can be best visualised as a graph where all inputs to new
transactions must &lt;strong&gt;spend&lt;/strong&gt; an unspent output from a previous
transaction in its entirety to produce new outputs, usually resulting in
“change” outputs being sent back to the payer. Much like the law of
conservation of energy, the sum of all inputs must be equal to the sum
of all outputs minus the transaction fee. This means all values can be
traced back to the transaction distributing the initial ADA supply in
the genesis block, minted ADA from transactions claiming stake rewards
or from transactions minting custom tokens.&lt;/p&gt;

&lt;h2 id=&quot;the-structure-of-a-transaction&quot;&gt;The Structure of a Transaction&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/ilap/ShelleyStuffs/raw/master/images/ShelleyTransactionChanges4Gougen.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image courtesy of &lt;a href=&quot;https://github.com/ilap&quot;&gt;ilap&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;guide-creating-an-example-transaction&quot;&gt;Guide: Creating an Example Transaction&lt;/h2&gt;

&lt;p&gt;Cardano Wallets hide away much of the subtleties behind transactions so
in this guide we will create, sign and submit a transaction sending 100
ADA to another address using the cardano-cli.&lt;/p&gt;

&lt;h3 id=&quot;load-ada-from-testnet-faucet&quot;&gt;Load ADA from Testnet Faucet&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://developers.cardano.org/en/testnets/cardano/tools/faucet/&quot;&gt;testnet
faucet&lt;/a&gt;
to send ADA to the payment address generated in our article &lt;a href=&quot;https://learn.lovelace.academy/getting-started/keys-and-addresses/&quot;&gt;Wallet
Basics: Keys and
Addresses&lt;/a&gt;. You
can see the payment address with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-unspent-transaction-outputs-for-address&quot;&gt;Query Unspent Transaction Outputs for Address&lt;/h3&gt;

&lt;p&gt;After a short while (minute or less) you can verify the funds from the
faucet have arrived in your payment.addr by running the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;UTXO0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;UTXO0H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 2p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-destination-payment-address&quot;&gt;Create Destination Payment Address&lt;/h3&gt;

&lt;p&gt;Create a new set of keys and a destination payment address
destination_payment.addr.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address key-gen &lt;span class=&quot;nt&quot;&gt;--verification-key-file&lt;/span&gt; destination_payment.vkey &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; destination_payment.skey
cardano-cli address build &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; destination_payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;load-protocol-parameters-file&quot;&gt;Load Protocol Parameters File&lt;/h3&gt;

&lt;p&gt;Transactions must always refer to the latest version of the Cardano
protocol parameters which can be retrieved by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;draft-transaction-to-calculate-fees&quot;&gt;Draft Transaction to Calculate Fees&lt;/h3&gt;

&lt;p&gt;Calculating fees for a transaction requires you to first create a draft
transaction following a similar structure to the real transaction. Note
that –tx-in uses the UTxO details queried above (transaction ID UTXO0H
and transaction output index UTXO0I). Also note –tx-out parameters
sending 100 ADA (100000000 lovelaces) to the destination address and 900
ADA (900000000 lovelaces) back to the payment address as change.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;draft.txraw 2&amp;gt; /dev/null
cardano-cli transaction build-raw &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$(echo $UTXO0I) --tx-out $(cat destination_payment.addr)+100000000 --tx-out $(cat payment.addr)+900000000 --ttl 0 --fee 0 --out-file draft.txraw&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli transaction calculate-min-fee &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; draft.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-in-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out-count&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--witness-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--protocol-params-file&lt;/span&gt; protocol.json | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[0-9]+'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;raw-transaction-with-metadata&quot;&gt;Raw Transaction with Metadata&lt;/h3&gt;

&lt;p&gt;With the fee we can now calculate the correct amount of change ADA to be
sent back to the payment address. We also define a –ttl parameter to
define how long this transaction is valid for (denoted by the current
slot tip of the chain + 600 seconds) before it is rejected by the
network.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CTIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .slot&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CTIP&lt;/span&gt; + 600&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TXOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0V&lt;/span&gt; - &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt; - 100000000&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
cardano-cli transaction build-raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$(echo $UTXO0I) --tx-out $(cat destination_payment.addr)+100000000 --tx-out $(cat destination_payment.addr)+$(echo $TXOUT) --ttl $TTL --fee $FEE --out-file sendtx.txraw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;signing-a-transaction&quot;&gt;Signing a Transaction&lt;/h3&gt;

&lt;p&gt;With the previously generated payment private signing key payment.skey
we can sign the transaction to prove consent to spend the ADA as the
holder of the keys to the payment address. Note that this has to be done
offline in an air-gapped machine outside of the testnets.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction sign &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; sendtx.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; payment.skey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; sendtx.txsigned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;submitting-a-transaction&quot;&gt;Submitting a Transaction&lt;/h3&gt;

&lt;p&gt;With the signed transaction we can now submit it to the rest of the
blockchain network. Once successfully submitted it will propagate across
all the nodes in the network residing in their mem pools until bundled
onto the next available block by a stake pool node.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction submit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-file&lt;/span&gt; sendtx.txsigned &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exploring-transactions&quot;&gt;Exploring Transactions&lt;/h2&gt;

&lt;p&gt;Using an explorer is the easiest way to navigate across all the addresses, blocks and transactions in Cardano.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://explorer.cardano.org/&quot;&gt;Cardano Blockchain Explorer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cardanoscan.io/&quot;&gt;Cardano Scan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adastat.net/&quot;&gt;ADA Stat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adaex.org/&quot;&gt;ADAex.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blockchair.com/cardano&quot;&gt;Blockchair: Cardano&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pool.pm/&quot;&gt;Pool.pm (toggle TXs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">Transactions are basic units representing the creation or transfer of values in a blockchain and make up a significant payload of every block appended to it. Transactions and their metadata last the entire lifetime of the blockchain, so once appended and accepted by the majority of the network, cannot be altered or deleted without a major coordinated event like a hard fork.</summary></entry><entry><title type="html">Running a Full Cardano Node</title><link href="https://fauno.github.io/Learn/running-a-full-node/" rel="alternate" type="text/html" title="Running a Full Cardano Node" /><published>2021-06-09T00:00:00-03:00</published><updated>2021-06-09T00:00:00-03:00</updated><id>https://fauno.github.io/Learn/running-a-full-node</id><content type="html" xml:base="https://fauno.github.io/Learn/running-a-full-node/">&lt;p&gt;As a developer the best starting point to Cardano is to get a good
understanding of the Cardano node. This knowledge is essential whether
you want to create Dapps, wallets, integration tools, mint custom tokens
or operate your own stake pool.&lt;/p&gt;

&lt;p&gt;We will break it down in five basic steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up your Linux environment&lt;/li&gt;
  &lt;li&gt;Clone and build cardano-node&lt;/li&gt;
  &lt;li&gt;Configure the node&lt;/li&gt;
  &lt;li&gt;Running and monitoring the node&lt;/li&gt;
  &lt;li&gt;Interacting with the node using cardano-cli&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;The Cardano node is a full node which contains the entire blockchain
since its genesis and acts as the main point of contact from you as
a client to the rest of the nodes in the network. Its main
responsibilities are to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uphold the Ouroboros consensus algorithm&lt;/li&gt;
  &lt;li&gt;Maintain the ledger and accounting model&lt;/li&gt;
  &lt;li&gt;Expose integration endpoints for clients and nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/node_cardano_components_version_main.png&quot; alt=&quot;&quot; /&gt;
Image courtesy of &lt;a href=&quot;https://docs.cardano.org/en/latest/explore-cardano/cardano-architecture-overview/index.html#cardano-blockchain-high-level-architecture&quot;&gt;Cardano docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-linux-environment&quot;&gt;Set up Your Linux Environment&lt;/h2&gt;

&lt;p&gt;At the time of writing, setting up your Cardano development environment
in Ubuntu 20.04 is the easiest and most well-documented approach. There
are a few ways to do so.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run Ubuntu as the default OS or dual boot it on your device&lt;/li&gt;
  &lt;li&gt;Run Ubuntu as a local VM (&lt;a href=&quot;https://www.youtube.com/watch?v=BatrK6G8j4M&quot;&gt;Windows&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=Hzji7w882OY&quot;&gt;macOS&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Run Ubuntu on a cloud VM via SSH (Windows, macOS)&lt;/li&gt;
  &lt;li&gt;Run Ubuntu using WSL2 (&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are pros and cons to each of these options but the most important
outcome is having a &lt;strong&gt;repeatable&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt; way of setting up
your environment from scratch. This will give you confidence in spinning
up a node as required across different networks and purposes.&lt;/p&gt;

&lt;h3 id=&quot;install-core-dependencies&quot;&gt;Install Core Dependencies&lt;/h3&gt;

&lt;p&gt;There are several core dependencies to install via APT before you can
build cardano-node.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git jq wget curl bc make automake g++ build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev libncursesw5 libncurses-dev libtinfo5 libtool autoconf htop net-tools chrony prometheus-node-exporter &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-cabal-ghc-and-libsodium&quot;&gt;Install Cabal, GHC and Libsodium&lt;/h3&gt;

&lt;p&gt;Once the core dependencies are installed we will move on to installing
Cabal (the Haskell build orchestrator), GHC (the Haskell compiler) and
Libsodium (the cryptography library).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/setup/cabal
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/setup/cabal
wget https://downloads.haskell.org/cabal/cabal-install-3.4.0.0/cabal-install-3.4.0.0-x86_64-ubuntu-16.04.tar.xz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; cabal-install-3.4.0.0-x86_64-ubuntu-16.04.tar.xz
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.local/bin
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;cabal ~/.local/bin/
~/.local/bin/cabal update
~/.local/bin/cabal user-config update
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/overwrite-policy:/overwrite-policy: always/g'&lt;/span&gt; ~/.cabal/config
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/setup/ghc
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/setup/ghc
wget https://downloads.haskell.org/~ghc/8.10.4/ghc-8.10.4-x86_64-deb10-linux.tar.xz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; ghc-8.10.4-x86_64-deb10-linux.tar.xz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ghc-8.10.4
./configure
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
cd&lt;/span&gt; ~/git/
git clone https://github.com/input-output-hk/libsodium
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libsodium
git checkout 66f017f1
./autogen.sh
./configure
make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/lib:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/lib/pkgconfig:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;clone-and-build-cardano-node&quot;&gt;Clone and build cardano-node&lt;/h2&gt;

&lt;p&gt;Now we can clone the
&lt;a href=&quot;https://github.com/input-output-hk/cardano-node&quot;&gt;cardano-node&lt;/a&gt;
repository, retrieve the latest tagged version, build it and copy the
built binaries to ~/.local/bin which will be part of the executable
path. This process takes between 10-30 mins so feel free to grab some
tea, coffee and/or snacks.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git
git clone https://github.com/input-output-hk/cardano-node.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cardano-node
git fetch &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recurse-submodules&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
git checkout tags/1.27.0
cabal configure &lt;span class=&quot;nt&quot;&gt;--with-compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ghc-8.10.4
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;package cardano-crypto-praos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; flags: -external-libsodium-vrf&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; cabal.project.local
~/.local/bin/cabal build all
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./scripts/bin-path.sh cardano-node&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ~/.local/bin/
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./scripts/bin-path.sh cardano-cli&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ~/.local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;post-build-scripts&quot;&gt;Post-build Scripts&lt;/h3&gt;

&lt;p&gt;For convenience it also makes sense to add amend the existing
environment variables.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export LD_LIBRARY_PATH=&quot;/usr/local/lib:$LD_LIBRARY_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PKG_CONFIG_PATH=&quot;/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.cabal/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.local/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export CARDANO_NODE_SOCKET_PATH=&quot;$HOME/testnet-node/socket/node.socket&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-the-node&quot;&gt;Configure the Node&lt;/h2&gt;

&lt;p&gt;Your Cardano node needs to be configured correctly to connect to
a Cardano network, and this is determined by four JSON configuration
files. We will focus on the testnet first.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/testnet-node/config
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/testnet-node/socket
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/testnet-node/config
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; config.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-config.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; bgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-byron-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; sgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-shelley-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; topology.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-topology.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;TraceBlockFetchDecisions&quot;: false/&quot;TraceBlockFetchDecisions&quot;: true/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/testnet-shelley-genesis/sgenesis/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/testnet-byron-genesis/bgenesis/g'&lt;/span&gt; config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-and-monitoring-the-node&quot;&gt;Running and Monitoring the Node&lt;/h2&gt;

&lt;p&gt;Now it just a matter of running your node pointing to the configuration
files above.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-node run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--topology&lt;/span&gt; ~/testnet-node/config/topology.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--database-path&lt;/span&gt; ~/testnet-node/db/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--socket-path&lt;/span&gt; ~/testnet-node/socket/node.socket &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--host-addr&lt;/span&gt; 0.0.0.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 3001 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; ~/testnet-node/config/config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are running the node for the first time it will need to fully
synchronise with the blockchain. Verify that the running node process is
exposing its internal metrics by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl localhost:12798/metrics | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ee]poch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see the expected Epoch and Slot by going to
&lt;a href=&quot;https://pooltool.io/&quot;&gt;pooltool.io&lt;/a&gt; and clicking on the MAINNET button
at the bottom panel until it changes to a red TESTNET button.&lt;/p&gt;

&lt;h2 id=&quot;interacting-with-the-node-using-cardano-cli&quot;&gt;Interacting with the Node using cardano-cli&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Getting the current tip&lt;/span&gt;
cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063

&lt;span class=&quot;c&quot;&gt;# Export the protocol parameters to file protocol.json&lt;/span&gt;
cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">As a developer the best starting point to Cardano is to get a good understanding of the Cardano node. This knowledge is essential whether you want to create Dapps, wallets, integration tools, mint custom tokens or operate your own stake pool.</summary></entry><entry><title type="html">Wallet Basics: Keys and Addresses</title><link href="https://fauno.github.io/Learn/keys-and-addresses/" rel="alternate" type="text/html" title="Wallet Basics: Keys and Addresses" /><published>2021-06-08T00:00:00-03:00</published><updated>2021-06-09T00:00:00-03:00</updated><id>https://fauno.github.io/Learn/keys-and-addresses</id><content type="html" xml:base="https://fauno.github.io/Learn/keys-and-addresses/">&lt;p&gt;Keys and addresses are at the heart of all information flow in Cardano
and other blockchains. Keys prove ownership, consent and authenticity
while addresses derived from these keys are destinations to hold facts
and values.&lt;/p&gt;

&lt;p&gt;A powerful feature arises from the fact that these cryptographic
entities can be created without connecting to or interacting with the
blockchain network. The de-coupling of these entities from the network
allows any one, even those without an internet connection, to create
unique addresses that can receive transaction outputs. Subsequently all
the facts and values in these addresses can only be unlocked by the keys
associated with it, safeguarding them from theft or confiscation.&lt;/p&gt;

&lt;p&gt;We will be focusing on the address keys on the right section of the
image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/ilap/ShelleyStuffs/raw/master/images/ShelleyKeyAndAddresses.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image courtesy of &lt;a href=&quot;https://github.com/ilap&quot;&gt;ilap&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;keys&quot;&gt;Keys&lt;/h2&gt;

&lt;p&gt;Two main types of keys are used within Cardano:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Payment Keys: For creating payment addresses and signing transactions
to spend ADA/assets in these payment addresses&lt;/li&gt;
  &lt;li&gt;Staking Keys: For creating payment/staking addresses, delegating
stake, claiming ADA rewards from staking addresses and registering
stake pools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both types are asymmetric
&lt;a href=&quot;https://en.wikipedia.org/wiki/EdDSA#Ed25519&quot;&gt;Ed25519&lt;/a&gt; key pairs
consisting of a private signing key and a public verification key.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Outside of the testnets it is &lt;strong&gt;EXTREMELY&lt;/strong&gt; important to safeguard
your private signing keys.&lt;/p&gt;

  &lt;p&gt;Creation of keys should be always be done in a &lt;strong&gt;trusted air-gapped
machine&lt;/strong&gt; with a &lt;strong&gt;pristine operating system&lt;/strong&gt; (e.g. a fresh Ubuntu
&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox VM&lt;/a&gt; with no
non-base-OS software apart from a verified version of cardano-cli) and
&lt;strong&gt;no network/internet connectivity&lt;/strong&gt;. &lt;!-- Signing transactions should
also be done in the air-gapped machine containing the private keys
where signed transactions can then be transferred out via a secure
USB. At no point should the signing keys be transferred to another
machine that is not air-gapped. --&gt;&lt;/p&gt;

  &lt;p&gt;These key files can transferred to/from a secure USB (e.g. Apricorn
Aegis) when necessary to ensure a fresh pristine environment every
time. We also recommended writing down the contents of the private
keys on a physical medium to be stored securely in case of
software/hardware failure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-payment-keys&quot;&gt;Creating Payment Keys&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address key-gen &lt;span class=&quot;nt&quot;&gt;--verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; payment.skey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create two files, the private signing key payment.skey and the
public verification key payment.vkey in the current directory.&lt;/p&gt;

&lt;h3 id=&quot;creating-staking-keys&quot;&gt;Creating Staking Keys&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli stake-address key-gen --verification-key-file stake.vkey --signing-key-file stake.skey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create the private signing key stake.skey and the public
verification key stake.vkey in the current directory.&lt;/p&gt;

&lt;h2 id=&quot;addresses&quot;&gt;Addresses&lt;/h2&gt;

&lt;p&gt;The keys above are then used to create two main types of addresses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Payment addresses: To receive ADA/assets&lt;/li&gt;
  &lt;li&gt;Staking addresses: To receive ADA staking rewards (automatically)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are effectively
a &lt;a href=&quot;https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE2&quot;&gt;blake2b-256&lt;/a&gt;
hash of the public key(s) and concatenated with other metadata (see
different address types in the image above) including the network in
which they are valid for (e.g. –mainnet, –testnet-magic 1097911063,
etc.) ### Creating a Payment Address&lt;/p&gt;

&lt;p&gt;Payment addresses are generally created using both payment and staking
verification keys to create an address known as base address. The act of
re-using the same staking key to generate multiple payment addresses
allow all the ADA at these addresses to be automatically staked to the
same designated stake pool. However it is also possible to create
&lt;a href=&quot;https://docs.cardano.org/en/latest/learn/types-addresses.html#enterprise-addresses&quot;&gt;enterprise
addresses&lt;/a&gt;,
the term for a non-staking payment address, by excluding the
–stake-verification-key-file parameter below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-a-staking-address&quot;&gt;Creating a Staking Address&lt;/h3&gt;

&lt;p&gt;A unique staking address is generated from a staking verification key.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli stake-address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; stake.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With your newly created keys and addresses you can create, sign and
submit transactions to learn about UTxOs and Metadata.&lt;/p&gt;</content><author><name></name></author><category term="Getting started" /><summary type="html">Keys and addresses are at the heart of all information flow in Cardano and other blockchains. Keys prove ownership, consent and authenticity while addresses derived from these keys are destinations to hold facts and values.</summary></entry><entry><title type="html">Why Build on Cardano</title><link href="https://fauno.github.io/Learn/why-cardano/" rel="alternate" type="text/html" title="Why Build on Cardano" /><published>2021-06-08T00:00:00-03:00</published><updated>2021-06-09T00:00:00-03:00</updated><id>https://fauno.github.io/Learn/why-cardano</id><content type="html" xml:base="https://fauno.github.io/Learn/why-cardano/">&lt;p&gt;Cardano is the next evolution of blockchain technology providing an
open, trusted and sustainable financial system that scales for global
use. Designed and built from scratch using a methodical research-based
approach, its brilliant team of researchers and engineers applied
learnings from the pitfalls of earlier blockchains to create an
inclusive platform which aims to give economic identity to all of the
world’s unbanked population.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sM0_V53_kGo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Cardano is the next evolution of blockchain technology providing an open, trusted and sustainable financial system that scales for global use. Designed and built from scratch using a methodical research-based approach, its brilliant team of researchers and engineers applied learnings from the pitfalls of earlier blockchains to create an inclusive platform which aims to give economic identity to all of the world’s unbanked population.</summary></entry></feed>